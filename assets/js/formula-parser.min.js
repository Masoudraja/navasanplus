/*!
 * Lightweight Formula Parser (UMD) for MNS Navasan Plus
 * Supports: numbers, + - * / ^ %, parentheses, unary minus,
 * variables (x, myVar, [myVar]), basic functions: sqrt, abs, floor, ceil, round, min, max.
 * API compatible (enough) with hot-formula-parser style:
 *   const parser = new FormulaParser.Parser();
 *   const out = parser.parse('2^x + max(3, y)', { x: 4, y: 5 }); // {error:null, result: 21}
 * Also exposes parser.evaluate(expr, vars) â†’ number
 */
!function(r,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():(r.FormulaParser=e(),r.formulaParser=r.FormulaParser)}(this,function(){"use strict";function r(r){return r>="0"&&r<="9"}function e(r){return/[A-Za-z_]/.test(r)}function t(r){return/[A-Za-z0-9_]/.test(r)}function n(r){return" "===r||"\t"===r||"\n"===r||"\r"===r}var u={"+":{p:1,a:"L",f:function(r,e){return r+e}},"-":{p:1,a:"L",f:function(r,e){return r-e}},"*":{p:2,a:"L",f:function(r,e){return r*e}},"/":{p:2,a:"L",f:function(r,e){return r/e}},"%":{p:2,a:"L",f:function(r,e){return r%e}},"^":{p:3,a:"R",f:function(r,e){return Math.pow(r,e)}}},a={sqrt:function(r){return Math.sqrt(r)},abs:function(r){return Math.abs(r)},floor:function(r){return Math.floor(r)},ceil:function(r){return Math.ceil(r)},round:function(r){return Math.round(r)},min:function(){return Math.min.apply(null,arguments)},max:function(){return Math.max.apply(null,arguments)}};return{Parser:function(){this.error=null,this.result=0,this.parse=function(p,o){try{var f=function(r){for(var e=[],t=[],n=[],a=0;a<r.length;a++){var p=r[a];if("num"!==p.type&&"str"!==p.type&&"var"!==p.type)if("fn"!==p.type)if(","!==p.type)if("op"!==p.type)if("("!==p.type)if(")"!==p.type);else{for(;t.length&&"("!==t[t.length-1].type;)e.push(t.pop());if(!t.length)throw new Error("Mismatched parentheses");t.pop();var o=n.pop();if(t.length&&"fn"===t[t.length-1].type){var f=t.pop();f.args=o||0,e.push(f)}}else t.push(p),n.push(1);else{for(var l=p.val,s="u-"===p.val?4:u[l].p,i="u-"===p.val?"R":u[l].a;t.length;){var h=t[t.length-1];if("op"===h.type){var v=h.val,c="u-"===v?4:u[v].p;if("L"===i&&s<=c||"R"===i&&s<c){e.push(t.pop());continue}}break}t.push(p)}else{for(;t.length&&"("!==t[t.length-1].type;)e.push(t.pop());if(!n.length)throw new Error("Misplaced comma");n[n.length-1]++}else t.push(p);else e.push(p)}for(;t.length;){var y=t.pop();if("("===y.type)throw new Error("Mismatched parentheses");e.push(y)}return e}(function(u){var a=(u||"").toString(),p=0,o=a.length,f=[];function l(){return a[p]}function s(){for(;p<o&&n(a[p]);)p++}for(;p<o&&(s(),!(p>=o));){var i=l();if(r(i)||"."===i&&p+1<o&&r(a[p+1])){var h=p;for(p++;p<o&&(r(a[p])||"."===a[p]);)p++;f.push({type:"num",val:parseFloat(a.slice(h,p))})}else if(e(i)||"["===i){if("["===i){for(var v=++p;p<o&&"]"!==a[p];)p++;var c=a.slice(v,p);"]"===a[p]&&p++,s(),"("===a[p]?f.push({type:"fn",val:c}):f.push({type:"var",val:c});continue}var y=p;for(p++;p<o&&t(a[p]);)p++;for(var m=a.slice(y,p),g=p;g<o&&n(a[g]);)g++;"("===a[g]?f.push({type:"fn",val:m}):f.push({type:"var",val:m})}else if("+"!==i&&"-"!==i&&"*"!==i&&"/"!==i&&"^"!==i&&"%"!==i)if("("!==i&&")"!==i&&","!==i){if('"'!==i&&"'"!==i)throw new Error("Unexpected character '"+i+"' at "+p);for(var w=i,d=++p;p<o&&a[p]!==w;)p++;var M=a.slice(d,p);a[p]===w&&p++,f.push({type:"str",val:M})}else f.push({type:i}),p++;else f.push({type:"op",val:i}),p++}for(var E=0;E<f.length;E++){var N=f[E];if("op"===N.type&&"-"===N.val){var b=f[E-1];b&&"op"!==b.type&&"("!==b.type&&","!==b.type||(f[E]={type:"op",val:"u-"})}}return f}(p||"")),l=function(r,e){var t=[];function n(r){if(e&&Object.prototype.hasOwnProperty.call(e,r)){var t=e[r];if("number"==typeof t)return t;var n=Number(t);if(!isNaN(n))return n}throw new Error("#NAME?")}for(var p=0;p<r.length;p++){var o=r[p];if("num"!==o.type)if("str"!==o.type)if("var"!==o.type)if("op"!==o.type)if("fn"!==o.type);else{for(var f=o.args||0,l=[],s=0;s<f;s++)l.unshift(t.pop());var i=a[o.val];if(!i)throw new Error("#NAME?");t.push(i.apply(null,l))}else{if("u-"===o.val){var h=t.pop();t.push(-h);continue}var v=t.pop(),c=t.pop();if(("/"===o.val||"%"===o.val)&&0===v)throw new Error("#DIV/0!");t.push(u[o.val].f(c,v))}else t.push(n(o.val));else{var y=Number(o.val);t.push(isNaN(y)?0:y)}else t.push(o.val)}return t.length?t[0]:0}(f,o||{});return this.error=null,this.result=l,{error:null,result:l}}catch(r){var s=""+r.message;return 0===s.indexOf("#DIV/0!")?this.error="#DIV/0!":0===s.indexOf("#NAME?")?this.error="#NAME?":this.error="#ERROR!",this.result=null,{error:this.error,result:null}}},this.evaluate=function(r,e){var t=this.parse(r,e);return t.error?NaN:t.result}}}});